# backend/main.py
from fastapi import FastAPI, UploadFile, HTTPException
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
import fitz  # PyMuPDF
import os
import tempfile
import shutil
from pathlib import Path
import uuid
from datetime import datetime, timedelta

app = FastAPI(title="PNG PDF Converter", version="1.0.0")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
downloaded_files = {}

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ downloaded_files"""
    now = datetime.now()
    expired_files = []
    
    for file_id, file_data in downloaded_files.items():
        if now - file_data['created_at'] > timedelta(minutes=10):  # 10 –º–∏–Ω—É—Ç lifetime
            expired_files.append(file_id)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(file_data['file_path']):
                    os.remove(file_data['file_path'])
            except:
                pass
    
    for file_id in expired_files:
        downloaded_files.pop(file_id, None)

@app.get("/")
async def root():
    return {"message": "PNG2PDF API is running", "status": "ok"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "png2pdf-api"}

@app.post("/png2pdf/")
async def png_to_pdf(file: UploadFile):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PNG ‚Üí PDF"""
    print(f"üîß PNG to PDF: {file.filename}")
    
    if not file.filename.lower().endswith('.png'):
        raise HTTPException(status_code=400, detail="File must be PNG")
    
    temp_dir = tempfile.mkdtemp()
    png_path = os.path.join(temp_dir, "input.png")
    pdf_path = os.path.join(temp_dir, "converted.pdf")
    file_id = str(uuid.uuid4())
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        content = await file.read()
        with open(png_path, "wb") as f:
            f.write(content)

        # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
        pdf_document = fitz.open()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        page = pdf_document.new_page()
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        rect = page.rect
        page.insert_image(rect, filename=png_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        pdf_document.save(pdf_path)
        pdf_document.close()

        print(f"‚úÖ PDF created: {pdf_path}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        downloaded_files[file_id] = {
            'file_path': pdf_path,
            'filename': f"{Path(file.filename).stem}.pdf",
            'media_type': 'application/pdf',
            'downloaded': False,
            'created_at': datetime.now(),
            'temp_dir': temp_dir
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ —Å–∞–º–æ–≥–æ —Ñ–∞–π–ª–∞
        return {
            "file_id": file_id,
            "filename": f"{Path(file.filename).stem}.pdf",
            "message": "File converted successfully. Use /download/{file_id} to download."
        }
        
    except Exception as e:
        print(f"‚ùå PNG to PDF error: {str(e)}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            shutil.rmtree(temp_dir)
        except:
            pass
        raise HTTPException(status_code=500, detail=f"Conversion error: {str(e)}")

@app.post("/pdf2png/")
async def pdf_to_png(file: UploadFile):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí PNG (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"""
    print(f"üîß PDF to PNG: {file.filename}")
    
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(status_code=400, detail="File must be PDF")
    
    temp_dir = tempfile.mkdtemp()
    pdf_path = os.path.join(temp_dir, "input.pdf")
    png_path = os.path.join(temp_dir, "converted.png")
    file_id = str(uuid.uuid4())
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        content = await file.read()
        with open(pdf_path, "wb") as f:
            f.write(content)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
        doc = fitz.open(pdf_path)
        if len(doc) == 0:
            raise HTTPException(status_code=400, detail="PDF is empty")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ PNG
        page = doc[0]
        mat = fitz.Matrix(2.0, 2.0)
        pix = page.get_pixmap(matrix=mat)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG
        pix.save(png_path)
        doc.close()

        print(f"‚úÖ PNG created: {png_path}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        downloaded_files[file_id] = {
            'file_path': png_path,
            'filename': f"{Path(file.filename).stem}.png",
            'media_type': 'image/png',
            'downloaded': False,
            'created_at': datetime.now(),
            'temp_dir': temp_dir
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ —Å–∞–º–æ–≥–æ —Ñ–∞–π–ª–∞
        return {
            "file_id": file_id,
            "filename": f"{Path(file.filename).stem}.png",
            "message": "File converted successfully. Use /download/{file_id} to download."
        }
        
    except Exception as e:
        print(f"‚ùå PDF to PNG error: {str(e)}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            shutil.rmtree(temp_dir)
        except:
            pass
        raise HTTPException(status_code=500, detail=f"Conversion error: {str(e)}")

@app.get("/download/{file_id}")
async def download_file(file_id: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ)"""
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    cleanup_old_files()
    
    if file_id not in downloaded_files:
        raise HTTPException(status_code=404, detail="File not found or expired")
    
    file_data = downloaded_files[file_id]
    
    if file_data['downloaded']:
        raise HTTPException(status_code=410, detail="File already downloaded")
    
    # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Å–∫–∞—á–∞–Ω–Ω—ã–π
    file_data['downloaded'] = True
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
    response = FileResponse(
        file_data['file_path'],
        media_type=file_data['media_type'],
        filename=file_data['filename']
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    import threading
    def delayed_cleanup():
        import time
        time.sleep(30)
        try:
            file_id_to_clean = file_id
            if file_id_to_clean in downloaded_files:
                file_data_to_clean = downloaded_files.pop(file_id_to_clean)
                if os.path.exists(file_data_to_clean['file_path']):
                    os.remove(file_data_to_clean['file_path'])
                if os.path.exists(file_data_to_clean['temp_dir']):
                    shutil.rmtree(file_data_to_clean['temp_dir'])
                print(f"üßπ Cleaned up downloaded file: {file_id_to_clean}")
        except Exception as e:
            print(f"‚ö†Ô∏è Cleanup error for {file_id}: {e}")
    
    threading.Thread(target=delayed_cleanup).start()
    
    return response

@app.get("/cleanup")
async def manual_cleanup():
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    cleanup_old_files()
    return {"message": f"Cleanup completed. Active files: {len(downloaded_files)}"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)